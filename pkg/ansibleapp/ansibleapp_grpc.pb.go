// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ansibleapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnsibleAppServiceClient is the client API for AnsibleAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnsibleAppServiceClient interface {
	Exec(ctx context.Context, in *AnsibleAppInput, opts ...grpc.CallOption) (*AnsibleAppOutput, error)
}

type ansibleAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnsibleAppServiceClient(cc grpc.ClientConnInterface) AnsibleAppServiceClient {
	return &ansibleAppServiceClient{cc}
}

func (c *ansibleAppServiceClient) Exec(ctx context.Context, in *AnsibleAppInput, opts ...grpc.CallOption) (*AnsibleAppOutput, error) {
	out := new(AnsibleAppOutput)
	err := c.cc.Invoke(ctx, "/ansibleapp.AnsibleAppService/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnsibleAppServiceServer is the server API for AnsibleAppService service.
// All implementations must embed UnimplementedAnsibleAppServiceServer
// for forward compatibility
type AnsibleAppServiceServer interface {
	Exec(context.Context, *AnsibleAppInput) (*AnsibleAppOutput, error)
	mustEmbedUnimplementedAnsibleAppServiceServer()
}

// UnimplementedAnsibleAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnsibleAppServiceServer struct {
}

func (UnimplementedAnsibleAppServiceServer) Exec(context.Context, *AnsibleAppInput) (*AnsibleAppOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedAnsibleAppServiceServer) mustEmbedUnimplementedAnsibleAppServiceServer() {}

// UnsafeAnsibleAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnsibleAppServiceServer will
// result in compilation errors.
type UnsafeAnsibleAppServiceServer interface {
	mustEmbedUnimplementedAnsibleAppServiceServer()
}

func RegisterAnsibleAppServiceServer(s grpc.ServiceRegistrar, srv AnsibleAppServiceServer) {
	s.RegisterService(&AnsibleAppService_ServiceDesc, srv)
}

func _AnsibleAppService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnsibleAppInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleAppServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ansibleapp.AnsibleAppService/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleAppServiceServer).Exec(ctx, req.(*AnsibleAppInput))
	}
	return interceptor(ctx, in, info, handler)
}

// AnsibleAppService_ServiceDesc is the grpc.ServiceDesc for AnsibleAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnsibleAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ansibleapp.AnsibleAppService",
	HandlerType: (*AnsibleAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _AnsibleAppService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ansibleapp.proto",
}
